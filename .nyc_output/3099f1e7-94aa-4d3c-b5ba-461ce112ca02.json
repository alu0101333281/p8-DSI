{"/home/usuario/p8-mod/src/ejercicio-1.ts":{"path":"/home/usuario/p8-mod/src/ejercicio-1.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":55}},"2":{"start":{"line":8,"column":26},"end":{"line":13,"column":1}},"3":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"4":{"start":{"line":28,"column":12},"end":{"line":28,"column":44}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":68}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":27}},"7":{"start":{"line":46,"column":8},"end":{"line":46,"column":55}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":56}},"9":{"start":{"line":62,"column":8},"end":{"line":62,"column":56}},"10":{"start":{"line":70,"column":8},"end":{"line":70,"column":58}},"11":{"start":{"line":78,"column":8},"end":{"line":78,"column":56}},"12":{"start":{"line":86,"column":8},"end":{"line":86,"column":57}},"13":{"start":{"line":94,"column":8},"end":{"line":94,"column":57}},"14":{"start":{"line":97,"column":0},"end":{"line":97,"column":40}},"15":{"start":{"line":113,"column":8},"end":{"line":131,"column":9}},"16":{"start":{"line":115,"column":16},"end":{"line":115,"column":36}},"17":{"start":{"line":116,"column":16},"end":{"line":116,"column":22}},"18":{"start":{"line":118,"column":16},"end":{"line":118,"column":41}},"19":{"start":{"line":119,"column":16},"end":{"line":119,"column":22}},"20":{"start":{"line":121,"column":16},"end":{"line":121,"column":42}},"21":{"start":{"line":122,"column":16},"end":{"line":122,"column":22}},"22":{"start":{"line":124,"column":16},"end":{"line":124,"column":44}},"23":{"start":{"line":125,"column":16},"end":{"line":125,"column":22}},"24":{"start":{"line":127,"column":16},"end":{"line":127,"column":45}},"25":{"start":{"line":128,"column":16},"end":{"line":128,"column":22}},"26":{"start":{"line":130,"column":16},"end":{"line":130,"column":48}},"27":{"start":{"line":132,"column":8},"end":{"line":132,"column":40}},"28":{"start":{"line":139,"column":8},"end":{"line":139,"column":28}},"29":{"start":{"line":146,"column":8},"end":{"line":146,"column":27}},"30":{"start":{"line":149,"column":8},"end":{"line":149,"column":32}},"31":{"start":{"line":156,"column":8},"end":{"line":156,"column":33}},"32":{"start":{"line":163,"column":8},"end":{"line":163,"column":34}},"33":{"start":{"line":171,"column":8},"end":{"line":171,"column":29}},"34":{"start":{"line":172,"column":8},"end":{"line":172,"column":33}},"35":{"start":{"line":180,"column":8},"end":{"line":180,"column":28}},"36":{"start":{"line":181,"column":8},"end":{"line":181,"column":34}},"37":{"start":{"line":189,"column":8},"end":{"line":189,"column":33}},"38":{"start":{"line":190,"column":8},"end":{"line":190,"column":40}},"39":{"start":{"line":198,"column":8},"end":{"line":198,"column":34}},"40":{"start":{"line":199,"column":8},"end":{"line":199,"column":40}},"41":{"start":{"line":207,"column":8},"end":{"line":207,"column":35}},"42":{"start":{"line":208,"column":8},"end":{"line":208,"column":40}},"43":{"start":{"line":211,"column":0},"end":{"line":211,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":29},"end":{"line":31,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":17},"end":{"line":39,"column":5}},"line":37},"2":{"name":"(anonymous_2)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":15},"end":{"line":47,"column":5}},"line":45},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":16},"end":{"line":55,"column":5}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":16},"end":{"line":63,"column":5}},"line":61},"5":{"name":"(anonymous_5)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":22},"end":{"line":71,"column":5}},"line":69},"6":{"name":"(anonymous_6)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":20},"end":{"line":79,"column":5}},"line":77},"7":{"name":"(anonymous_7)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":21},"end":{"line":87,"column":5}},"line":85},"8":{"name":"(anonymous_8)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":21},"end":{"line":95,"column":5}},"line":93},"9":{"name":"(anonymous_9)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":29},"end":{"line":133,"column":5}},"line":112},"10":{"name":"(anonymous_10)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":17},"end":{"line":140,"column":5}},"line":138},"11":{"name":"(anonymous_11)","decl":{"start":{"line":145,"column":4},"end":{"line":145,"column":5}},"loc":{"start":{"line":145,"column":17},"end":{"line":147,"column":5}},"line":145},"12":{"name":"(anonymous_12)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":17},"end":{"line":150,"column":5}},"line":148},"13":{"name":"(anonymous_13)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":25},"end":{"line":157,"column":5}},"line":155},"14":{"name":"(anonymous_14)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":15},"end":{"line":164,"column":5}},"line":162},"15":{"name":"(anonymous_15)","decl":{"start":{"line":170,"column":4},"end":{"line":170,"column":5}},"loc":{"start":{"line":170,"column":22},"end":{"line":173,"column":5}},"line":170},"16":{"name":"(anonymous_16)","decl":{"start":{"line":179,"column":4},"end":{"line":179,"column":5}},"loc":{"start":{"line":179,"column":22},"end":{"line":182,"column":5}},"line":179},"17":{"name":"(anonymous_17)","decl":{"start":{"line":188,"column":4},"end":{"line":188,"column":5}},"loc":{"start":{"line":188,"column":22},"end":{"line":191,"column":5}},"line":188},"18":{"name":"(anonymous_18)","decl":{"start":{"line":197,"column":4},"end":{"line":197,"column":5}},"loc":{"start":{"line":197,"column":30},"end":{"line":200,"column":5}},"line":197},"19":{"name":"(anonymous_19)","decl":{"start":{"line":206,"column":4},"end":{"line":206,"column":5}},"loc":{"start":{"line":206,"column":20},"end":{"line":209,"column":5}},"line":206}},"branchMap":{"0":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{"line":27,"column":8},"end":{"line":29,"column":9}}],"line":27},"1":{"loc":{"start":{"line":113,"column":8},"end":{"line":131,"column":9}},"type":"switch","locations":[{"start":{"line":114,"column":12},"end":{"line":116,"column":22}},{"start":{"line":117,"column":12},"end":{"line":119,"column":22}},{"start":{"line":120,"column":12},"end":{"line":122,"column":22}},{"start":{"line":123,"column":12},"end":{"line":125,"column":22}},{"start":{"line":126,"column":12},"end":{"line":128,"column":22}},{"start":{"line":129,"column":12},"end":{"line":130,"column":48}}],"line":113}},"s":{"0":1,"1":1,"2":1,"3":13,"4":1,"5":12,"6":4,"7":6,"8":3,"9":3,"10":1,"11":1,"12":1,"13":1,"14":1,"15":14,"16":3,"17":3,"18":6,"19":6,"20":2,"21":2,"22":1,"23":1,"24":1,"25":1,"26":1,"27":13,"28":4,"29":5,"30":3,"31":2,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":0,"40":0,"41":0,"42":0,"43":1},"f":{"0":13,"1":4,"2":6,"3":3,"4":3,"5":1,"6":1,"7":1,"8":1,"9":14,"10":4,"11":5,"12":3,"13":2,"14":2,"15":1,"16":1,"17":1,"18":0,"19":0},"b":{"0":[1,12],"1":[3,6,2,1,1,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/p8-mod/src/ejercicio-1.ts","sources":["/home/usuario/p8-mod/src/ejercicio-1.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\n    Tipo para definir las conversiones de unidades\n    */\ntype ConversionTable = {\n  [key: string]: number;\n};\n\n/**\n    \n        Tabla de conversiones para unidades de longitud\n        */\nconst LengthConversions: ConversionTable = {\n  inches: 1,\n  feet: 12,\n  yards: 36,\n  miles: 63360,\n};\n\n/**\n    \n        Clase que representa una cantidad de medida en unidades imperiales de longitud\n        */\nexport class ImperialLength {\n  private _value: number; // valor en unidades base (pulgadas)\n\n  /**\n    \n        Constructor de la clase\n        @param value Valor de la cantidad medida\n        @param unit Unidad de medida (inches, feet, yards o miles)\n        */\n  constructor(value: number, unit: string) {\n    if (!(unit.toLowerCase() in LengthConversions)) {\n      throw new Error(\"Invalid unit\");\n    }\n    this._value = value * LengthConversions[unit.toLowerCase()];\n  }\n\n  /**\n    \n        Getter para obtener el valor en pulgadas\n        @returns Valor en pulgadas\n        */\n  get inches(): number {\n    return this._value;\n  }\n\n  /**\n    \n        Getter para obtener el valor en pies\n        @returns Valor en pies\n        */\n  get feet(): number {\n    return this._value / LengthConversions[\"feet\"];\n  }\n\n  /**\n    \n        Getter para obtener el valor en yardas\n        @returns Valor en yardas\n        */\n  get yards(): number {\n    return this._value / LengthConversions[\"yards\"];\n  }\n\n  /**\n    \n        Getter para obtener el valor en millas\n        @returns Valor en millas\n        */\n  get miles(): number {\n    return this._value / LengthConversions[\"miles\"];\n  }\n\n  /**\n    \n        Setter para establecer el valor en pulgadas\n        @param value Valor en pulgadas\n        */\n  set inches(value: number) {\n    this._value = value * LengthConversions[\"inches\"];\n  }\n\n  /**\n    \n        Setter para establecer el valor en pies\n        @param value Valor en pies\n        */\n  set feet(value: number) {\n    this._value = value * LengthConversions[\"feet\"];\n  }\n\n  /**\n    \n        Setter para establecer el valor en yardas\n        @param value Valor en yardas\n        */\n  set yards(value: number) {\n    this._value = value * LengthConversions[\"yards\"];\n  }\n\n  /**\n    \n        Setter para establecer el valor en millas\n        @param value Valor en millas\n        */\n  set miles(value: number) {\n    this._value = value * LengthConversions[\"miles\"];\n  }\n}\n\n/**\n\n    Represents an imperial mass value that can be converted between different units.\n    /\n    export class ImperialMass {\n    /*\n        Creates a new instance of ImperialMass.\n        @param value - The value to be converted.\n        @param unit - The unit of the value. Valid options are: ounces, pounds, stones, hundredweights, and tons.\n        @throws An error if an invalid unit is provided.\n        */\nexport class ImperialMass {\n  private _ounces: number;\n  private _value: number;\n\n  constructor(value: number, unit: string) {\n    switch (unit.toLowerCase()) {\n      case \"ounces\":\n        this._value = value;\n        break;\n      case \"pounds\":\n        this._value = value * 16;\n        break;\n      case \"stones\":\n        this._value = value * 224;\n        break;\n      case \"hundredweights\":\n        this._value = value * 35840;\n        break;\n      case \"tons\":\n        this._value = value * 358400;\n        break;\n      default:\n        throw new Error(\"Invalid unit\");\n    }\n\n    this._ounces = this._value * 16;\n  }\n  /**\n\n    The value of the ImperialMass instance in ounces.\n    */\n  get ounces(): number {\n    return this._ounces;\n  }\n  /**\n\n    The value of the ImperialMass instance in stones.\n    */\n  get pounds(): number {\n    return this._value;\n  }\n\n  get stones(): number {\n    return this._value / 14;\n  }\n  /**\n\n    The value of the ImperialMass instance in hundredweights.\n    */\n  get hundredweights(): number {\n    return this._value / 112;\n  }\n  /**\n\n    The value of the ImperialMass instance in tons.\n    */\n  get tons(): number {\n    return this._value / 2240;\n  }\n  /**\n\n    Sets the value of the ImperialMass instance in ounces.\n    @param value - The new value in ounces.\n    */\n  set ounces(value: number) {\n    this._ounces = value;\n    this._value = value / 16;\n  }\n  /**\n\n    Sets the value of the ImperialMass instance in pounds.\n    @param value - The new value in pounds.\n    */\n  set pounds(value: number) {\n    this._value = value;\n    this._ounces = value * 16;\n  }\n  /**\n\n    Sets the value of the ImperialMass instance in stones.\n    @param value - The new value in stones.\n    */\n  set stones(value: number) {\n    this._value = value * 14;\n    this._ounces = this._value * 16;\n  }\n  /**\n\n    Sets the value of the ImperialMass instance in hundredweights.\n    @param value - The new value in hundredweights.\n    */\n  set hundredweights(value: number) {\n    this._value = value * 112;\n    this._ounces = this._value * 16;\n  }\n  /**\n\n    Sets the value of the ImperialMass instance in tons.\n    @param value - The new value in tons.\n    */\n  set tons(value: number) {\n    this._value = value * 2240;\n    this._ounces = this._value * 16;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"51814830fde55d1ba86a4d4b88a5a7afa43cdf28","contentHash":"821a4162b4fb68b76f8b977cb22d0997389bca34f78cb6e65c669aff25cf8626"}}